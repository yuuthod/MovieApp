{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref","poster","react_default","a","createElement","src","alt","MovieGenres","_ref2","genre","className","Movie","this","props","title","genres","map","index","key","rating","lib_default","text","summary","maxLine","ellipsis","trimRight","basedOn","Component","App","state","_renderMovies","_this","movies","movie","src_Movie_0","title_long","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWA8CA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQK,IAAI,iBAO9B,SAASC,EAATC,GAA6B,IAAPC,EAAOD,EAAPC,MAClB,OACIP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,gBAAgBD,GAOzBE,uLAlDP,OACAT,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACXR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACXR,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQW,KAAKC,MAAMZ,UAEpCC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACXR,EAAAC,EAAAC,cAAA,UAAKQ,KAAKC,MAAMC,OACfF,KAAKC,MAAME,OAAOC,IAAI,SAACP,EAAOQ,GAAR,OAAkBf,EAAAC,EAAAC,cAACG,EAAD,CAAaE,MAAOA,EAAOS,IAAKD,MACzEf,EAAAC,EAAAC,cAAA,KAAGM,UAAU,iBAAiBE,KAAKC,MAAMM,QACzCjB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACXR,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACAkB,KAAMT,KAAKC,MAAMS,QACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,cAIhBxB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBA5BXiB,aCkDLC,6MA9CbC,MAAQ,KAURC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOhB,IAAI,SAAAiB,GACnC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,CACLpB,MAAOmB,EAAME,WACblC,OAAQgC,EAAMG,mBACdrB,OAAQkB,EAAMlB,OACdI,OAAQc,EAAMd,OACdG,QAASW,EAAMX,QACfJ,IAAKe,EAAMI,UAKjBC,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA7B1B3C,KAAK0B,8CAiCL,OACEpC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACdE,KAAKiB,MAAMG,OAASpB,KAAKkB,gBAAkB,qBA9ChCH,aCQE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.fa299483.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n\n\nclass Movie extends Component {\n    static propTypes = {\n        title : PropTypes.string.isRequired,\n        genres : PropTypes.array.isRequired,\n        rating : PropTypes.number.isRequired,\n        summary : PropTypes.string.isRequired\n    }\n    render() {\n        return (\n        <div className=\"movie__box\">\n            <div className=\"movie__colum\">\n                <div className=\"movie__img\">\n                    <MoviePoster poster={this.props.poster} />\n                </div>\n                <div className=\"movie__content\">\n                    <h1>{this.props.title}</h1>\n                    {this.props.genres.map((genre, index) => <MovieGenres genre={genre} key={index} />) }\n                    <p className=\"movie__rating\">{this.props.rating}</p>\n                    <div className=\"movie__summary\">\n                        <LinesEllipsis\n                        text={this.props.summary}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        />\n                    </div>\n                </div>\n                <div className=\"clear\"></div>\n            </div>\n        </div>\n        );\n    }\n}\n\n\n\n// Functional Component\n// no render, no lifecicle\n\nfunction MoviePoster({poster}){\n    return (\n        <img src={poster} alt=\"Movie Poster\" />\n    )\n}\nMoviePoster.propTypes = {\n    poster : PropTypes.string.isRequired\n}\n\nfunction MovieGenres({genre}){\n    return (\n        <span className=\"movie__genre\">{genre}</span>\n    );\n}\nMovieGenres.propTypes = {\n    genre : PropTypes.string.isRequired\n}\n\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  // LifeCycle\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update compoenetWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> component\n\n  state = {\n\n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  // 규칙 : 직접만든 함수는 앞에 _를 붙이자.\n  // = () => {}\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie =>{\n      return <Movie \n        title={movie.title_long} \n        poster={movie.medium_cover_image} \n        genres={movie.genres}\n        rating={movie.rating}\n        summary={movie.summary}\n        key={movie.id}/>\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {this.state.movies ? this._renderMovies() : \"Loading...\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}